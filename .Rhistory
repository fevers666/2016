library(ggplot2)
library(dplyr)
library(tidyr)
library(pollstR)
library(gtools)
wheel <- sample(rep( c("red", "black", "green"), times = c(18,18,2)),38,replace=FALSE)
get_outcome <- function(N){
events <- sample( wheel, N, replace=TRUE) #
x <- sum(as.numeric(events == "black"))
S_N <- 2*x
S_N
}
full_monty <- function(plays, B=10000){
earnings <- replicate( B, get_outcome(plays))
#x <- sum(as.numeric(spins == "black"))# total blacks
#tab <- table(spins)
#prop.table(tab)
}
n <- c(10,25)
prob <- sapply(n,full_monty)
plot(n,prob)
View(prob)
full_monty <- function(plays, B=10000){
earnings <- replicate( B, get_outcome(plays))
x <- sum(as.numeric(earnings == "black"))# total blacks
#tab <- table(spins)
#prop.table(tab)
}
n <- c(10,25)
prob <- sapply(n,full_monty)
full_monty <- function(plays, B=10000){
earnings <- replicate( B, get_outcome(plays))
#x <- sum(as.numeric(spins == "black"))# total blacks
#tab <- table(spins)
#prop.table(tab)
}
n <- c(10,25)
prob <- sapply(n,full_monty)
View(prob)
n <- c(10,25,100)
prob <- sapply(n,full_monty)
View(prob)
plot(n,prob)
plot(prob,n)
View(prob)
View(prob)
View(prob)
n <- c(10,25,100,1000)
prob <- sapply(n,full_monty)
mean(prob$V1)
prob[1]
prob[,1]
mean(prob[,1])
mean(prob[,2])
mean(prob[,3])
mean(prob[,4])
max(prob[,4])
min(prob[,4])
summary(prob[,1])
summary(prob[,2])
summary(prob[,3])
summary(prob[,4])
plot(prob[,1])
plot(10,prob[,1])
typeof(prob)
class(prob)
?sapply
hist(prob)
hist(prob[,1])
hist(prob[,2])
hist(prob[,3])
hist(prob[,4])
sd(wheel)
sd(18/38)
.53*38
sd(get_outcome(30))
x <- get_outcome(30)
x
get_outcome <- function(N){
events <- sample( wheel, N, replace=TRUE) #
x <- sum(as.numeric(events == "black"))
S_N <- x#2*x
S_N
}
get_outcome(10)
full_monty <- function(plays, B=10000){
earnings <- replicate( B, get_outcome(plays))
#x <- sum(as.numeric(spins == "black"))# total blacks
#tab <- table(spins)
#prop.table(tab)
}
n <- c(10,25,100,1000)
prob <- sapply(n,full_monty)
hist(prob[,1])
hist(prob[,2])
hist(prob[,3])
hist(prob[,4])
summary(prob[,1])
summary(prob[,2])
summary(prob[,3])
summary(prob[,4])
sd(prob[,4])
sd(prob[,1])
sd(prob[,2])
sd(prob[,3])
sd(prob[,4])
mean(c(sd(prob[,1]),sd(prob[,2]),sd(prob[,3]),sd(prob[,4])))
meanOfMonteCarloMeans <-c(mean(prob[,1]),mean(prob[,2]),mean(prob[,3]),mean(prob[,4]))
mean(meanOfMonteCarloMeans)
meantries(mean(c(10,25.100,1000)))
meantries <- mean(c(10,25.100,1000))
mean(meanOfMonteCarloMeans)/meantries
modelSD <- sd(sample10s)/10
sample10s <- prob[,1]
sample25s <- prob[,2]
sample100s <- prob[,3]
sample1000s <- prob[,4]
summary(sample10s)
summary(sample25s)
summary(sample100s)
summary(sample1000s)
modelSD <- sd(sample10s)/10
modelSD10 <- sd(sample10s)/10
modelSD1000 <- sd(sample1000s)/1000
pnorm(sample10s,4.738,1.59)
?pnorm
plot(dnorm(sample10s,4.738,1.59))
plot(pnorm(sample10s,4.738,1.59))
?box
boxplot(pnorm(sample10s,4.738,1.59))
boxplot(pnorm(sample1000s,4.738,1.59))
Summary(sample1000s)
summary(sample1000s)
boxplot(pnorm(sample1000s,473.8,159))
mean(sample10s>10)
mean(sample10s>5)
mean(sample1000s>1000)
plot(pnorm(sample10s,4.738,1.59))
hist(pnorm(sample10s,4.738,1.59))
hist(pnorm(sample1000s,473.8,159))
summary(sample25s)
sd(sample25s)/25
hist(pnorm(sample25s,11.82,.09))
modelSD25 <- sd(sample25s)/25
hist(pnorm(sample25s,11.82,.1))
table(sample25s)
sd(sample25s)
hist(pnorm(sample25s,11.82,.2.48))
hist(pnorm(sample25s,11.82,2.48))
sd(sample25s)/25
mean(sample25s)
sd(sample25s)
mortgageOutcome <- sample(rep( c("good", "bad"), times = c(98,2)),100,replace=FALSE)
mortgageOutcome <- sample(rep( c("good", "bad"), times = c(98,2)),100,replace=FALSE)
getAnnualLosses <- function(n){
annualLosses <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(events == "bad"))
x*120000 # return ONLY losses
}
2016Losses < getAnnualLosses(1000);
2016Losses <- getAnnualLosses(1000);
2016Losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
getAnnualLosses <- function(n){
annualLosses <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(annualLosses == "bad"))
x*120000 # return ONLY losses
}
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
mortageMonty <- function(loans, B=10000){
earnings <- replicate( B, getAnnualLosses(loans))
}
mortageMonty(1000)
simulation <- mortageMonty(1000)
str(simulation)
class(simulation)
mean(simulation)
boxplot(simulation)
plot(simulation)
qplot(simulation)
qqplot(simulation)
ggplot(simulation)
ggplot(simulation,aes(y=count))
mortageMonty <- function(loans, B=10000){
replicate( B, getAnnualLosses(loans))
}
simulation <- mortageMonty(1000)
library(ggplot2)
library(dplyr)
library(tidyr)
library(pollstR)
library(gtools)
#sampling model
wheel <- sample(rep( c("red", "black", "green"), times = c(18,18,2)),38,replace=FALSE)
get_outcome <- function(N){
events <- sample( wheel, N, replace=TRUE) #
x <- sum(as.numeric(events == "black"))
S_N <- x # not 2*x . return ONLY earnings, not earnings plus cost
}
get_outcome(10)
full_monty <- function(plays, B=10000){
earnings <- replicate( B, get_outcome(plays))
#x <- sum(as.numeric(spins == "black"))# total blacks
#tab <- table(spins)
#prop.table(tab)
}
n <- c(10,25,100,1000)
prob <- sapply(n,full_monty)
sample10s <- prob[,1]
sample25s <- prob[,2]
sample100s <- prob[,3]
sample1000s <- prob[,4]
summary(sample10s)
summary(sample25s)
summary(sample100s)
summary(sample1000s)
hist(sample10s)
hist(sample25s)
hist(sample100s)
hist(sample1000s)
modelSD10 <- sd(sample10s)/10
modelSD25 <- sd(sample25s)/25
modelSD1000 <- sd(sample1000s)/1000
mean(sample25s)
sd(sample25s)
hist(pnorm(sample25s,11.82,2.48))
mortgageOutcome <- sample(rep( c("good", "bad"), times = c(98,2)),100,replace=FALSE)
getAnnualLosses <- function(n){
annualLosses <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(annualLosses == "bad"))
losses <- x*120000 # return ONLY losses
}
losses <- getAnnualLosses(1000)
losses <- getAnnualLosses(1000)
mortageMonty <- function(loans, B=10000){
replicate( B, getAnnualLosses(loans))
}
simulation <- mortageMonty(1000)
simMean <- mean(simulation)
simSd <- sd(simulation)
summary(simulation)
plot(pnorm(simulation))
summary(simulation)
desc(simulation)
class(simulation)
sort(simulation)
p2 <- ggplot(simulation,
aes(x=simulation))
p2 + geom_histogram() + scale_x_log10()
mortageMonty <- function(loans, B=10000){
resultSet <- replicate( B, getAnnualLosses(loans))
}
simulation <- mortageMonty(1000)
class(simulation)
losses <- getAnnualLosses(1000)
getAnnualProfit <- function(n, interestRate){
annualLosses <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(annualLosses == "good"))# get number of good loans
profit <- x*180000*(1+interestRate) # return ONLY profit
}
profits <- getAnnualProfit(1000, .02)
profits-losses
getAnnualProfit <- function(n, interestRate){
annualProfit <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(annualProfit == "good"))# get number of good loans
profit <- x*180000*interestRate # return ONLY profit
}
profits <- getAnnualProfit(1000, .02)
profits-losses
profits <- getAnnualProfit(1000, .002)
profits <- getAnnualProfit(1000, .0005)
profits <- getAnnualProfit(1000, .0007)
profits <- getAnnualProfit(1000, .0006)
profits <- getAnnualProfit(1000, .00058)
profits <- getAnnualProfit(1000, .00056)
profits <- getAnnualProfit(1000, .00057)
profits <- getAnnualProfit(1000, .02)#.00057)# should have been .02 ?
getAnnualProfit <- function(n, interestRate){
annualProfit <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(annualProfit == "good"))# get number of good loans
profit <- x*180000*interestRate # calc profit from the good loans
profit-getAnnualLosses(n) # subtract losses from bad
}
profits <- getAnnualProfit(1000, .02)
profits <- getAnnualProfit(1000, .002)#.00057)# should have been .02 ?
profits <- getAnnualProfit(1000, .02)#.00057)# should have been .02 ?
profits <- getAnnualProfit(1000, .02)#.00057)# should have been .02 ?
profits <- getAnnualProfit(1000, .02)#.00057)# should have been .02 ?
profits <- getAnnualProfit(1000, .02)#.00057)# should have been .02 ?
getAnnualProfit <- function(n, interestRate){
annualProfit <- sample( mortgageOutcome, n, replace=TRUE) #
x <- sum(as.numeric(annualProfit == "good"))# get number of good loans
profit <- x*(180000*interestRate) # calc profit from the good loans
profit-getAnnualLosses(n) # subtract losses from bad
}
profits <- getAnnualProfit(1000, .02)#.00057)# should have been .02 ?
?pbinom()
pbinom(getAnnualProfit(1000, .02),10000,0)
